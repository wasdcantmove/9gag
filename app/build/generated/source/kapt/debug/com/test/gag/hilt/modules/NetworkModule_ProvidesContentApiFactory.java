// Generated by Dagger (https://dagger.dev).
package com.test.gag.hilt.modules;

import com.test.gag.api.ContentRetrofitApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesContentApiFactory implements Factory<ContentRetrofitApi> {
  private final NetworkModule module;

  private final Provider<OkHttpClient.Builder> okHttpProvider;

  private final Provider<Retrofit.Builder> retrofitProvider;

  public NetworkModule_ProvidesContentApiFactory(NetworkModule module,
      Provider<OkHttpClient.Builder> okHttpProvider, Provider<Retrofit.Builder> retrofitProvider) {
    this.module = module;
    this.okHttpProvider = okHttpProvider;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ContentRetrofitApi get() {
    return providesContentApi(module, okHttpProvider.get(), retrofitProvider.get());
  }

  public static NetworkModule_ProvidesContentApiFactory create(NetworkModule module,
      Provider<OkHttpClient.Builder> okHttpProvider, Provider<Retrofit.Builder> retrofitProvider) {
    return new NetworkModule_ProvidesContentApiFactory(module, okHttpProvider, retrofitProvider);
  }

  public static ContentRetrofitApi providesContentApi(NetworkModule instance,
      OkHttpClient.Builder okHttp, Retrofit.Builder retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.providesContentApi(okHttp, retrofit));
  }
}
