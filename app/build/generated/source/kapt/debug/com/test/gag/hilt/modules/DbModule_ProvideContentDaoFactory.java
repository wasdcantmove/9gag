// Generated by Dagger (https://dagger.dev).
package com.test.gag.hilt.modules;

import com.test.gag.db.ContentDatabase;
import com.test.gag.db.dao.ContentDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DbModule_ProvideContentDaoFactory implements Factory<ContentDao> {
  private final DbModule module;

  private final Provider<ContentDatabase> dbProvider;

  public DbModule_ProvideContentDaoFactory(DbModule module, Provider<ContentDatabase> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public ContentDao get() {
    return provideContentDao(module, dbProvider.get());
  }

  public static DbModule_ProvideContentDaoFactory create(DbModule module,
      Provider<ContentDatabase> dbProvider) {
    return new DbModule_ProvideContentDaoFactory(module, dbProvider);
  }

  public static ContentDao provideContentDao(DbModule instance, ContentDatabase db) {
    return Preconditions.checkNotNullFromProvides(instance.provideContentDao(db));
  }
}
