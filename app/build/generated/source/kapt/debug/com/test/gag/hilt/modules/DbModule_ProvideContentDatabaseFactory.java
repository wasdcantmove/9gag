// Generated by Dagger (https://dagger.dev).
package com.test.gag.hilt.modules;

import android.content.Context;
import com.test.gag.db.ContentDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DbModule_ProvideContentDatabaseFactory implements Factory<ContentDatabase> {
  private final DbModule module;

  private final Provider<Context> appProvider;

  public DbModule_ProvideContentDatabaseFactory(DbModule module, Provider<Context> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public ContentDatabase get() {
    return provideContentDatabase(module, appProvider.get());
  }

  public static DbModule_ProvideContentDatabaseFactory create(DbModule module,
      Provider<Context> appProvider) {
    return new DbModule_ProvideContentDatabaseFactory(module, appProvider);
  }

  public static ContentDatabase provideContentDatabase(DbModule instance, Context app) {
    return Preconditions.checkNotNullFromProvides(instance.provideContentDatabase(app));
  }
}
