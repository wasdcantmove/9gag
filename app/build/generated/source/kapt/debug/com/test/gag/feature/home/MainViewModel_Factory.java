// Generated by Dagger (https://dagger.dev).
package com.test.gag.feature.home;

import androidx.lifecycle.SavedStateHandle;
import com.test.gag.feature.home.backend.ContentUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<ContentUseCase> useCaseProvider;

  private final Provider<SavedStateHandle> stateProvider;

  public MainViewModel_Factory(Provider<ContentUseCase> useCaseProvider,
      Provider<SavedStateHandle> stateProvider) {
    this.useCaseProvider = useCaseProvider;
    this.stateProvider = stateProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(useCaseProvider.get(), stateProvider.get());
  }

  public static MainViewModel_Factory create(Provider<ContentUseCase> useCaseProvider,
      Provider<SavedStateHandle> stateProvider) {
    return new MainViewModel_Factory(useCaseProvider, stateProvider);
  }

  public static MainViewModel newInstance(ContentUseCase useCase, SavedStateHandle state) {
    return new MainViewModel(useCase, state);
  }
}
