// Generated by Dagger (https://dagger.dev).
package com.test.gag.feature.home.dagger;

import com.test.gag.db.ContentDatabase;
import com.test.gag.feature.home.backend.LocalContentRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainModule_ProvidesLocalContentRepositoryFactory implements Factory<LocalContentRepository> {
  private final MainModule module;

  private final Provider<ContentDatabase> databaseProvider;

  public MainModule_ProvidesLocalContentRepositoryFactory(MainModule module,
      Provider<ContentDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public LocalContentRepository get() {
    return providesLocalContentRepository(module, databaseProvider.get());
  }

  public static MainModule_ProvidesLocalContentRepositoryFactory create(MainModule module,
      Provider<ContentDatabase> databaseProvider) {
    return new MainModule_ProvidesLocalContentRepositoryFactory(module, databaseProvider);
  }

  public static LocalContentRepository providesLocalContentRepository(MainModule instance,
      ContentDatabase database) {
    return Preconditions.checkNotNullFromProvides(instance.providesLocalContentRepository(database));
  }
}
