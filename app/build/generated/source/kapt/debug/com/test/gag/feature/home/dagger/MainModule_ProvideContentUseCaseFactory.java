// Generated by Dagger (https://dagger.dev).
package com.test.gag.feature.home.dagger;

import com.test.gag.feature.home.backend.ContentRepository;
import com.test.gag.feature.home.backend.ContentUseCase;
import com.test.gag.feature.home.backend.LocalContentRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainModule_ProvideContentUseCaseFactory implements Factory<ContentUseCase> {
  private final MainModule module;

  private final Provider<ContentRepository> contentRepositoryProvider;

  private final Provider<LocalContentRepository> localContentRepositoryProvider;

  public MainModule_ProvideContentUseCaseFactory(MainModule module,
      Provider<ContentRepository> contentRepositoryProvider,
      Provider<LocalContentRepository> localContentRepositoryProvider) {
    this.module = module;
    this.contentRepositoryProvider = contentRepositoryProvider;
    this.localContentRepositoryProvider = localContentRepositoryProvider;
  }

  @Override
  public ContentUseCase get() {
    return provideContentUseCase(module, contentRepositoryProvider.get(), localContentRepositoryProvider.get());
  }

  public static MainModule_ProvideContentUseCaseFactory create(MainModule module,
      Provider<ContentRepository> contentRepositoryProvider,
      Provider<LocalContentRepository> localContentRepositoryProvider) {
    return new MainModule_ProvideContentUseCaseFactory(module, contentRepositoryProvider, localContentRepositoryProvider);
  }

  public static ContentUseCase provideContentUseCase(MainModule instance,
      ContentRepository contentRepository, LocalContentRepository localContentRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideContentUseCase(contentRepository, localContentRepository));
  }
}
